# Full example config for PureLine using default powerline symbols
# and custom 256 color

# Colors must be defined in pairs of FG & BG
PL_COLORS[MyOrange]='\[\e[38;5;208m\]'
PL_COLORS[On_MyOrange]='\[\e[48;5;208m\]'

PL_COLORS[MyLime]='\[\e[38;5;119m\]'
PL_COLORS[On_MyLime]='\[\e[48;5;119m\]'

PL_COLORS[MyYellow]='\[\e[38;5;227m\]'
PL_COLORS[On_MyYellow]='\[\e[48;5;227m\]'

PL_COLORS[MyLightGrey]='\[\e[38;5;250m\]'
PL_COLORS[On_MyLightGrey]='\[\e[48;5;250m\]'

PL_COLORS[MyBlue]='\[\e[38;5;69m\]'
PL_COLORS[On_MyBlue]='\[\e[48;5;69m\]'

PL_COLORS[MyRed]='\[\e[38;5;196m\]'
PL_COLORS[On_MyRed]='\[\e[48;5;196m\]'

PL_COLORS[MyDarkGrey]='\[\e[38;5;240m\]'
PL_COLORS[On_MyDarkGrey]='\[\e[48;5;240m\]'

PL_COLORS[MyPurple]='\[\e[38;5;89m\]'
PL_COLORS[On_MyPurple]='\[\e[48;5;89m\]'

PL_COLORS[MyGreen]='\[\e[38;5;83m\]'
PL_COLORS[On_MyGreen]='\[\e[48;5;83m\]'

# All segments are enabled. Uncomment/comment to enable/disable a segment

# ssh_segment

# Set default symbols if not already defined in config
# Defaults should be standard symbols.
[[ -z ${PL_SYMBOLS[ssh]} ]] && PL_SYMBOLS[ssh]='╤'

# -----------------------------------------------------------------------------
# append to prompt: indicate if SSH session
# arg: $1 foreground color
# arg: $2 background color
# option variables;
#   PL_SSH_SHOW_HOST: true/false to show host name/ip
#   PL_SSH_USE_IP: true/false to show IP instead of hostname

function ssh_segment {
    if [[ "${SSH_CLIENT}" || "${SSH_TTY}" ]]; then
        local bg_color="$1"
        local fg_color="$2"
        local content="${PL_SYMBOLS[ssh]}"
        if [ "$PL_SSH_SHOW_HOST" = true ]; then
            if [ "$PL_SSH_USE_IP" = true ]; then
                content+=" $(ip_address)"
            else
                content+=" \h"
            fi
        fi
        PS1+="$(segment_end "$fg_color" "$bg_color")"
        PS1+="$(segment_content "$fg_color" "$bg_color" " $content ")"
        __last_color="$bg_color"
    fi
}


# git_segment

# Set default symbols if not already defined in config
# Defaults should be standard symbols.
[[ -z ${PL_SYMBOLS[git_branch]} ]] && PL_SYMBOLS[git_branch]="╬" 
[[ -z ${PL_SYMBOLS[git_untracked]} ]] && PL_SYMBOLS[git_untracked]="?"
[[ -z ${PL_SYMBOLS[git_stash]} ]] && PL_SYMBOLS[git_stash]="§"
[[ -z ${PL_SYMBOLS[git_ahead]} ]] && PL_SYMBOLS[git_ahead]="↑"
[[ -z ${PL_SYMBOLS[git_behind]} ]] && PL_SYMBOLS[git_behind]="↓"
[[ -z ${PL_SYMBOLS[git_modified]} ]] && PL_SYMBOLS[git_modified]="+"
[[ -z ${PL_SYMBOLS[git_staged]} ]] && PL_SYMBOLS[git_staged]="•"
[[ -z ${PL_SYMBOLS[git_conflicts]} ]] && PL_SYMBOLS[git_conflicts]="*"

# -----------------------------------------------------------------------------
# append to prompt: git branch with indicators for;
#     number of; modified files, staged files and conflicts
# arg: $1 background color
# arg: $2 foreground color
# option variables;
#   PL_GIT_STASH: true/false
#   PL_GIT_AHEAD: true/false
#   PL_GIT_STAGED: true/false
#   PL_GIT_CONFLICTS: true/false
#   PL_GIT_MODIFIED: true/false
#   PL_GIT_UNTRACKED: true/false
function git_segment {
    local git_branch
    which git >/dev/null 2>&1 || return;  ## return if no git

    git_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    
    [[ -z $git_branch  ]] && return;  ## return early if not a git branch

    local bg_color="$1"
    local fg_color="$2"
    local content="${PL_SYMBOLS[git_branch]} $git_branch"

    if [ "$PL_GIT_STASH" = true ]; then
        local number_stash
        number_stash="$(git stash list 2>/dev/null | grep -F -v -c 'fatal:' | tr -d '[:space:]')"
        if [ ! "$number_stash" -eq 0 ]; then
            content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_stash]}$number_stash"
        fi
    fi

    if [ "$PL_GIT_AHEAD" = true ]; then
        local number_behind_ahead
        number_behind_ahead="$(git rev-list --count --left-right '@{upstream}...HEAD' 2>/dev/null)"
        local number_ahead="${number_behind_ahead#*	}"
        local number_behind="${number_behind_ahead%	*}"
        if [ ! "0$number_ahead" -eq 0 ] || [ ! "0$number_behind" -eq 0 ]; then
            if [ ! "$number_ahead" -eq 0 ]; then
                content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_ahead]}$number_ahead"
            fi
            if [ ! "$number_behind" -eq 0 ]; then
                content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_behind]}$number_behind"
            fi
        fi
    fi

    if [ "$PL_GIT_STAGED" = true ]; then
        local number_staged
        number_staged="$(git diff --staged --name-only --diff-filter=AM 2> /dev/null | wc -l | tr -d '[:space:]')"
        if [ ! "$number_staged" -eq "0" ]; then
            content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_staged]}$number_staged"
        fi
    fi

    if [ "$PL_GIT_CONFLICTS" = true ]; then
        local number_conflicts
        number_conflicts="$(git diff --name-only --diff-filter=U 2> /dev/null | wc -l | tr -d '[:space:]')"
        if [ ! "$number_conflicts" -eq "0" ]; then
            content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_conflicts]}$number_conflicts"
        fi
    fi

    if [ "$PL_GIT_MODIFIED" = true ]; then
        local number_modified
        number_modified="$(git diff --name-only --diff-filter=M 2> /dev/null | wc -l | tr -d '[:space:]')"
        if [ ! "$number_modified" -eq "0" ]; then
            content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_modified]}$number_modified"
        fi
    fi

    if [ "$PL_GIT_UNTRACKED" = true ]; then
        local number_untracked
        number_untracked="$(git ls-files --other --exclude-standard 2> /dev/null | wc -l | tr -d '[:space:]')"
        if [ ! "$number_untracked" -eq "0" ]; then
            content+=" ${PL_SYMBOLS[soft_separator]} ${PL_SYMBOLS[git_untracked]}$number_untracked"
        fi
    fi

    if [ -n "$(git status --porcelain 2> /dev/null)" ]; then
        if [ -n "$PL_GIT_DIRTY_FG" ]; then
            fg_color="$PL_GIT_DIRTY_FG"
        fi
        if [ -n "$PL_GIT_DIRTY_BG" ]; then
            bg_color="$PL_GIT_DIRTY_BG"
        fi
    fi

    PS1+="$(segment_end "$fg_color" "$bg_color")"
    PS1+="$(segment_content "$fg_color" "$bg_color" " $content ")"
    __last_color="$bg_color"
}

# duration_segment
# show the time spent on the last command excecuted

# Set default symbols if not already defined in config
# Defaults should be standard symbols.
[[ -z ${PL_SYMBOLS[duration]}  ]] && PL_SYMBOLS[duration]='⧗'

# -----------------------------------------------------------------------------
# return the current time
function timer_now {
    date +%s%N
}

# -----------------------------------------------------------------------------
# use a debug trap to start the timer on next command
function timer_start {
    timer_start=${timer_start:-$(timer_now)}
}
trap 'timer_start' DEBUG

# -----------------------------------------------------------------------------
# stop the timer and format output for duration
# the stop is triggered by (and called from) the segment when PS1 is built.
function timer_stop {
    local delta_us=$((($(timer_now) - timer_start) / 1000))
    local us=$((delta_us % 1000))
    local ms=$(((delta_us / 1000) % 1000))
    local s=$(((delta_us / 1000000) % 60))
    local m=$(((delta_us / 60000000) % 60))
    local h=$((delta_us / 3600000000))
    if   ((h > 0));     then duration=${h}h${m}m
    elif ((m > 0));     then duration=${m}m${s}s
    elif ((s >= 10));   then duration=${s}.$((ms / 100))s
    elif ((s > 0));     then duration=${s}.$(printf %03d $ms)s
    elif ((ms >= 100)); then duration=${ms}ms
    elif ((ms > 0));    then duration=${ms}.$((us / 100))ms
    else duration=${us}us
    fi
    unset timer_start
}

# -----------------------------------------------------------------------------
# append to prompt: indicator for time spend in the last cmd
# arg: $1 background color
# arg: $2 foreground color
function duration_segment {
        local bg_color="$1"
        local fg_color="$2"
        timer_stop
        # local hourglass_symbol=$'\xE2\x29\xD7'
        local content=" ${PL_SYMBOLS[duration]} ${duration}"
        PS1+="$(segment_end "$fg_color" "$bg_color")"
        PS1+="$(segment_content "$fg_color" "$bg_color" "$content ")"
        __last_color="$bg_color"
}

PL_SEGMENTS=(
    # segment                Background  Foreground
    # -------                ----------  ----------
    'time_segment            MyLightGrey Black'
    #'battery_segment         MyBlue      Black'
    #'user_segment            MyLime      Black'
    #'ssh_segment             MyYellow    Black'
    #'screen_session_segment  MyLightGrey Black'
    #'virtual_env_segment     MyBlue      Black'
    #'conda_env_segment       MyBlue      Black'
    #'aws_profile_segment     MyLime      Black'
    #'kubernetes_segment      MyLime      Black'
    'path_segment            MyBlue      Black'
    'read_only_segment       MyRed       White'
    'background_jobs_segment MyPurple    White'
    'git_segment             MyGreen     Black'
    'return_code_segment     MyRed       White'
    'newline_segment'
    #'duration_segment        MyDarkGrey  White'
    'prompt_segment          MyDarkGrey  White'
)

# segment Options
PL_PATH_TRIM=0             # 0 Full path, 1, Current, 2+ trim level
PL_TIME_SHOW_SECONDS=true
PL_USER_SHOW_HOST=true
PL_USER_USE_IP=false
PL_SSH_SHOW_HOST=true
PL_SSH_USE_IP=true
PL_GIT_DIRTY_FG=Black
PL_GIT_DIRTY_BG=MyOrange
PL_GIT_AHEAD=true
PL_GIT_MODIFIED=true
PL_GIT_STAGED=true
PL_GIT_CONFLICTS=true
PL_GIT_UNTRACKED=true
PL_GIT_STASH=true
PL_PROMPT_ROOT_BG=Red
PL_PROMPT_ROOT_FG=White

# redefine symbols using powerline glyphs
PL_SYMBOLS[hard_separator]="▶"
PL_SYMBOLS[soft_separator]="▶"

# Alt 2607
PL_SYMBOLS[git_branch]="☇"
PL_SYMBOLS[git_untracked]="↔"
PL_SYMBOLS[git_stash]="§"
PL_SYMBOLS[git_ahead]="↑"
PL_SYMBOLS[git_behind]="↓"
PL_SYMBOLS[git_modified]="✚ "
PL_SYMBOLS[git_staged]="✔ "
PL_SYMBOLS[git_conflicts]="✘ "

PL_SYMBOLS[read_only]=""
PL_SYMBOLS[return_code]="⚑"
PL_SYMBOLS[background_jobs]="⏎"

PL_SYMBOLS[battery_charging]="⚡"
PL_SYMBOLS[battery_discharging]="▮"

PL_SYMBOLS[aws_profile]='☁'
PL_SYMBOLS[screen]='💻'
PL_SYMBOLS[duration]='⏳'

PL_SYMBOLS[pwd_separator]=''
PL_SYMBOLS[pwd_trimmed]=''
